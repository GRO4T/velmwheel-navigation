# ====================================================================================================================================
# @file       ukf.yaml
# @author     Tom Moore (ayrton04@gmail.com)
# @author     Steve Macenski (stevenmacenski@gmail.com)
# @maintainer Krzysztof Pierczyk (krzysztof.pierczyk@gmail.com)
# @date       Tuesday, 29th March 2022 5:09:49 pm
# @modified   Wednesday, 13th April 2022 3:16:26 am
# @project    engineering-thesis
# @brief
#    
#    Default configuration for the `ukf_node` filter node
#    
# @copyright Krzysztof Pierczyk Â© 2022
# ====================================================================================================================================

/**:

    # Node's parameters
    ros__parameters:

        # =================================================== General parameters =================================================== #

        # he frequency, in Hz, at which the filter will output a position estimate. Note that the filter will not begin
        # omputation until it receives at least one message from one of the inputs. It will then run continuously at the
        # requency specified here, regardless of whether it receives more measurements. Defaults to 30 if unspecified.
        frequency: 30.0

        # he period, in seconds, after which we consider a sensor to have timed out. In this event, we carry out a predict
        # ycle on the EKF without correcting it. This parameter can be thought of as the minimum frequency with which the
        # ilter will generate new output. Defaults to 1 / frequency if not specified.
        sensor_timeout: 0.1

        # kf_localization_node and ukf_localization_node both use a 3D omnidirectional motion model. If this parameter is
        # et to true, no 3D information will be used in your state estimate. Use this if you are operating in a planar
        # nvironment and want to ignore the effect of small variations in the ground plane that might otherwise be detected
        # y, for example, an IMU. Defaults to false if unspecified.
        two_d_mode: false

        # se this parameter to provide an offset to the transform generated by ekf_localization_node. This can be used for
        # uture dating the transform, which is required for interaction with some other packages. Defaults to 0.0 if
        # nspecified.
        transform_time_offset: 0.0

        # se this parameter to provide specify how long the tf listener should wait for a transform to become available. 
        # efaults to 0.0 if unspecified.
        transform_timeout: 0.0

        # f you're having trouble, try setting this to true, and then echo the /diagnostics_agg topic to see if the node is
        # nhappy with any settings or data.
        print_diagnostics: true

        # ebug settings. Not for the faint of heart. Outputs a ludicrous amount of information to the file specified by
        # ebug_out_file. I hope you like matrices! Please note that setting this to true will have strongly deleterious
        # ffects on the performance of the node. Defaults to false if unspecified.
        debug: false

        # efaults to "robot_localization_debug.txt" if unspecified. Please specify the full path.
        debug_out_file: /path/to/debug/file.txt

        # hether we'll allow old measurements to cause a re-publication of the updated state
        permit_corrected_publication: false

        # hether to publish the acceleration state. Defaults to false if unspecified.
        publish_acceleration: false

        # hether to broadcast the transformation over the /tf topic. Defaults to true if unspecified.
        publish_tf: true

        # ========================================================= Frames ========================================================= #

        # EP-105 (http://www.ros.org/reps/rep-0105.html) specifies four principal coordinate frames: base_link, odom, map, and
        # arth. base_link is the coordinate frame that is affixed to the robot. Both odom and map are world-fixed frames.
        # he robot's position in the odom frame will drift over time, but is accurate in the short term and should be
        # ontinuous. The odom frame is therefore the best frame for executing local motion plans. The map frame, like the odom
        # rame, is a world-fixed coordinate frame, and while it contains the most globally accurate position estimate for your
        # obot, it is subject to discrete jumps, e.g., due to the fusion of GPS data or a correction from a map-based
        # ocalization node. The earth frame is used to relate multiple map frames by giving them a common reference frame.
        # kf_localization_node and ukf_localization_node are not concerned with the earth frame.
        # ere is how to use the following settings:
        # . Set the map_frame, odom_frame, and base_link frames to the appropriate frame names for your system.
        #     1a. If your system does not have a map_frame, just remove it, and make sure "world_frame" is set to the value of
        #         odom_frame.
        # . If you are fusing continuous position data such as wheel encoder odometry, visual odometry, or IMU data, set
        #   "world_frame" to your odom_frame value. This is the default behavior for robot_localization's state estimation nodes.
        # . If you are fusing global absolute position data that is subject to discrete jumps (e.g., GPS or position updates
        # rom landmark observations) then:
        #     3a. Set your "world_frame" to your map_frame value
        #     3b. MAKE SURE something else is generating the odom->base_link transform. Note that this can even be another state
        #         estimation node from robot_localization! However, that instance should *not* fuse the global data.
        map_frame: map                      # efaults to "map" if unspecified
        odom_frame: odom                    # efaults to "odom" if unspecified
        base_link_frame: base_link          # efaults to "base_link" if unspecified
        world_frame: odom                   # efaults to the value of odom_frame if unspecified

        # ================================================== First odometry input ================================================== #

        # he filter accepts an arbitrary number of inputs from each input message type (nav_msgs/Odometry,
        # eometry_msgs/PoseWithCovarianceStamped, geometry_msgs/TwistWithCovarianceStamped,
        # ensor_msgs/Imu). To add an input, simply append the next number in the sequence to its "base" name, e.g., odom0,
        # dom1, twist0, twist1, imu0, imu1, imu2, etc. The value should be the topic name. These parameters obviously have no
        # efault values, and must be specified.
        odom0: example/odom

        # ach sensor reading updates some or all of the filter's state. These options give you greater control over which
        # alues from each measurement are fed to the filter. For example, if you have an odometry message as input, but only
        # ant to use its Z position value, then set the entire vector to false, except for the third entry. The order of the
        # alues is x, y, z, roll, pitch, yaw, vx, vy, vz, vroll, vpitch, vyaw, ax, ay, az. Note that not some message types
        # o not provide some of the state variables estimated by the filter. For example, a TwistWithCovarianceStamped message
        # as no pose information, so the first six values would be meaningless in that case. Each vector defaults to all false
        # f unspecified, effectively making this parameter required for each sensor.
        odom0_config: [true,  true,  false,
                       false, false, false,
                       false, false, false,
                       false, false, true,
                       false, false, false]

        # f you have high-frequency data or are running with a low frequency parameter value, then you may want to increase
        # he size of the subscription queue so that more measurements are fused.
        odom0_queue_size: 2

        # [ADVANCED] Large messages in ROS can exhibit strange behavior when they arrive at a high frequency. This is a result
        # f Nagle's algorithm. This option tells the ROS subscriber to use the tcpNoDelay option, which disables Nagle's
        # lgorithm.
        odom0_nodelay: false

        # [ADVANCED] When measuring one pose variable with two sensors, a situation can arise in which both sensors under-
        # eport their covariances. This can lead to the filter rapidly jumping back and forth between each measurement as they
        # rrive. In these cases, it often makes sense to (a) correct the measurement covariances, or (b) if velocity is also
        # easured by one of the sensors, let one sensor measure pose, and the other velocity. However, doing (a) or (b) isn't
        # lways feasible, and so we expose the differential parameter. When differential mode is enabled, all absolute pose
        # ata is converted to velocity data by differentiating the absolute pose measurements. These velocities are then
        # ntegrated as usual. NOTE: this only applies to sensors that provide pose measurements; setting differential to true
        # or twist measurements has no effect.
        odom0_differential: false

        # [ADVANCED] When the node starts, if this parameter is true, then the first measurement is treated as a "zero point"
        # or all future measurements. While you can achieve the same effect with the differential paremeter, the key
        # ifference is that the relative parameter doesn't cause the measurement to be converted to a velocity before
        # ntegrating it. If you simply want your measurements to start at 0 for a given sensor, set this to true.
        odom0_relative: false

        # [ADVANCED] If your data is subject to outliers, use these threshold settings, expressed as Mahalanobis distances, to
        # ontrol how far away from the current vehicle state a sensor measurement is permitted to be. Each defaults to
        # umeric_limits<double>::max() if unspecified. It is strongly recommended that these parameters be removed if not
        # equired. Data is specified at the level of pose and twist variables, rather than for each variable in isolation.
        # or messages that have both pose and twist data, the parameter specifies to which part of the message we are applying
        # he thresholds.
        odom0_pose_rejection_threshold: 5.0
        odom0_twist_rejection_threshold: 1.0

        # ================================================== Second odometry input ================================================= #

        # Topic name
        odom1: example/another_odom
        # State variables measured
        odom1_config: [false, false, true,
                       false, false, false,
                       false, false, false,
                       false, false, true,
                       false, false, false]
        # Advanced configuration
        odom1_differential: false
        odom1_relative: true
        odom1_queue_size: 2
        odom1_pose_rejection_threshold: 2.0
        odom1_twist_rejection_threshold: 0.2
        odom1_nodelay: false

        # ==================================================== First pose input ==================================================== #

        # Topic name
        pose0: example/pose
        # State variables measured
        pose0_config: [true,  true,  false,
                       false, false, false,
                       false, false, false,
                       false, false, false,
                       false, false, false]
        # Advanced configuration ( @note There is the difference in parameter name in the 'pose0_rejection_threshold' )
        pose0_differential: true
        pose0_relative: false
        pose0_queue_size: 5
        pose0_rejection_threshold: 2.0
        pose0_nodelay: false

        # ==================================================== First twist input =================================================== #

        # Topic name
        twist0: example/twist
        # State variables measured
        twist0_config: [false, false, false,
                        false, false, false,
                        true,  true,  true,
                        false, false, false,
                        false, false, false]
        # Advanced configuration
        twist0_queue_size: 3
        twist0_rejection_threshold: 2.0
        twist0_nodelay: false

        # ===================================================== First IMU input ==================================================== #

        # Topic name
        imu0: example/imu
        # State variables measured
        imu0_config: [false, false, false,
                      true,  true,  true,
                      false, false, false,
                      true,  true,  true,
                      true,  true,  true]
        # Advanced configuration ( @note There is the difference in parameter name in the 'imu0_pose_rejection_threshold' )
        imu0_nodelay: false
        imu0_differential: false
        imu0_relative: true
        imu0_queue_size: 5
        imu0_pose_rejection_threshold: 0.8
        imu0_twist_rejection_threshold: 0.8
        imu0_linear_acceleration_rejection_threshold: 0.8

        # [ADVANCED] Some IMUs automatically remove acceleration due to gravity, and others don't. If yours doesn't, please set
        # his to true, and *make sure* your data conforms to REP-103, specifically, that the data is in ENU frame.
        imu0_remove_gravitational_acceleration: true

        # ====================================================== Control input ===================================================== #

        # [ADVANCED]  The EKF and UKF models follow a standard predict/correct cycle. During prediction, if there is no
        # cceleration reference, the velocity at time t+1 is simply predicted to be the same as the velocity at time t. During
        # orrection, this predicted value is fused with the measured value to produce the new velocity estimate. This can be
        # roblematic, as the final velocity will effectively be a weighted average of the old velocity and the new one. When
        # his velocity is the integrated into a new pose, the result can be sluggish covergence. This effect is especially
        # oticeable with LIDAR data during rotations. To get around it, users can try inflating the process_noise_covariance
        # or the velocity variable in question, or decrease the  variance of the variable in question in the measurement
        # tself. In addition, users can also take advantage of the control command being issued to the robot at the time we
        # ake the prediction. If control is used, it will get converted into an acceleration term, which will be used during
        # redicition. Note that if an acceleration measurement for the variable in question is available from one of the
        # nputs, the control term will be ignored.
        # hether or not we use the control input during predicition. Defaults to false.
        use_control: true
        # hether the input (assumed to be cmd_vel) is a geometry_msgs/Twist or geometry_msgs/TwistStamped message. Defaults to
        # alse.
        stamped_control: false
        # he last issued control command will be used in prediction for this period. Defaults to 0.2.
        control_timeout: 0.2
        # hich velocities are being controlled. Order is vx, vy, vz, vroll, vpitch, vyaw.
        control_config: [true, false, false, false, false, true]
        # laces limits on how large the acceleration term will be. Should match your robot's kinematics.
        acceleration_limits: [1.3, 0.0, 0.0, 0.0, 0.0, 3.4]
        # cceleration and deceleration limits are not always the same for robots.
        deceleration_limits: [1.3, 0.0, 0.0, 0.0, 0.0, 4.5]
        # f your robot cannot instantaneously reach its acceleration limit, the permitted change can be controlled with these
        # ains
        acceleration_gains: [0.8, 0.0, 0.0, 0.0, 0.0, 0.9]
        # f your robot cannot instantaneously reach its deceleration limit, the permitted change can be controlled with these
        # ains
        deceleration_gains: [1.0, 0.0, 0.0, 0.0, 0.0, 1.0]

        # ================================================= Advanced configuration ================================================= #
        
        # [ADVANCED] The process noise covariance matrix can be difficult to tune, and can vary for each application, so it is
        # xposed as a configuration parameter. This matrix represents the noise we add to the total error after each
        # rediction step. The better the omnidirectional motion model matches your system, the smaller these values can be.
        # owever, if users find that a given variable is slow to converge, one approach is to increase the
        # rocess_noise_covariance diagonal value for the variable in question, which will cause the filter's predicted error
        # o be larger, which will cause the filter to trust the incoming measurement more during correction. The values are
        # rdered as x, y, z, roll, pitch, yaw, vx, vy, vz, vroll, vpitch, vyaw, ax, ay, az. Defaults to the matrix below if
        # nspecified.
        process_noise_covariance: [
            0.05, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,  0.00,  0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0,
            0.00, 0.05, 0.00, 0.00, 0.00, 0.00, 0.00,  0.00,  0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0,
            0.00, 0.00, 0.06, 0.00, 0.00, 0.00, 0.00,  0.00,  0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0,
            0.00, 0.00, 0.00, 0.03, 0.00, 0.00, 0.00,  0.00,  0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0,
            0.00, 0.00, 0.00, 0.00, 0.03, 0.00, 0.00,  0.00,  0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0,
            0.00, 0.00, 0.00, 0.00, 0.00, 0.06, 0.00,  0.00,  0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0,
            0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.025, 0.00,  0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0,
            0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,  0.025, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0,
            0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,  0.00,  0.04, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0,
            0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,  0.00,  0.00, 0.01, 0.00, 0.00, 0.00, 0.00, 0.0,
            0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,  0.00,  0.00, 0.00, 0.01, 0.00, 0.00, 0.00, 0.0,
            0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,  0.00,  0.00, 0.00, 0.00, 0.02, 0.00, 0.00, 0.0,
            0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,  0.00,  0.00, 0.00, 0.00, 0.00, 0.01, 0.00, 0.0,
            0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,  0.00,  0.00, 0.00, 0.00, 0.00, 0.00, 0.01, 0.0,
            0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,  0.00,  0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.015
        ]
        # [ADVANCED] This represents the initial value for the state estimate error covariance matrix. Setting a diagonal
        # alue (variance) to a large value will result in rapid convergence for initial measurements of the variable in
        # uestion. Users should take care not to use large values for variables that will not be measured directly. The values
        # re ordered as x, y, z, roll, pitch, yaw, vx, vy, vz, vroll, vpitch, vyaw, ax, ay, az. Defaults to the matrix below
        # if unspecified.
        initial_estimate_covariance: [
            1e-9, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,  0.00,  0.00, 0.00, 0.0,
            0.00, 1e-9, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,  0.00,  0.00, 0.00, 0.0,
            0.00, 0.00, 1e-9, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,  0.00,  0.00, 0.00, 0.0,
            0.00, 0.00, 0.00, 1e-9, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,  0.00,  0.00, 0.00, 0.0,
            0.00, 0.00, 0.00, 0.00, 1e-9, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,  0.00,  0.00, 0.00, 0.0,
            0.00, 0.00, 0.00, 0.00, 0.00, 1e-9, 0.00, 0.00, 0.00, 0.00, 0.00,  0.00,  0.00, 0.00, 0.0,
            0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 1e-9, 0.00, 0.00, 0.00, 0.00,  0.00,  0.00, 0.00, 0.0,
            0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 1e-9, 0.00, 0.00, 0.00,  0.00,  0.00, 0.00, 0.0,
            0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 1e-9, 0.00, 0.00,  0.00,  0.00, 0.00, 0.0,
            0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 1e-9, 0.00,  0.00,  0.00, 0.00, 0.0,
            0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 1e-9,  0.00,  0.00, 0.00, 0.0,
            0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,  1e-9,  0.00, 0.00, 0.0,
            0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,  0.00,  1e-9, 0.00, 0.0,
            0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,  0.00,  0.00, 1e-9, 0.0,
            0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,  0.00,  0.00, 0.00, 1e-9
        ]

        # [ADVANCED, UKF ONLY] The alpha and kappa variables control the spread of the sigma points. Unless you are familiar
        # ith UKFs, it's probably a good idea to leave these alone.
        # efaults to 0.001 if unspecified.
        alpha: 0.001
        # efaults to 0 if unspecified.
        kappa: 0.0

        # [ADVANCED, UKF ONLY] The beta variable relates to the distribution of the state vector. Again, it's probably best to
        # eave this alone if you're uncertain. Defaults to 2 if unspecified.
        beta: 2.0

        # ========================================================================================================================== #